{"version":3,"sources":["webpack:///./node_modules/gatsby-source-sanity/index.js","webpack:///./node_modules/@sanity/block-content-to-react/lib/BlockContent.js","webpack:///./node_modules/gatsby-source-sanity/lib/index.js","webpack:///./node_modules/gatsby-source-sanity/lib/images/getGatsbyImageProps.js","webpack:///./node_modules/url-parse/index.js","webpack:///./node_modules/requires-port/index.js","webpack:///./node_modules/querystringify/index.js","webpack:///./node_modules/@sanity/block-content-to-hyperscript/internals.js","webpack:///./node_modules/@sanity/block-content-to-hyperscript/lib/getImageUrl.js","webpack:///./node_modules/@sanity/block-content-to-hyperscript/lib/mergeSerializers.js","webpack:///./node_modules/@sanity/block-content-to-hyperscript/lib/internals.js","webpack:///./node_modules/@sanity/block-content-to-hyperscript/lib/serializers.js","webpack:///./node_modules/@sanity/block-content-to-hyperscript/node_modules/@sanity/generate-help-url/index.js","webpack:///./node_modules/@sanity/block-content-to-hyperscript/node_modules/@sanity/image-url/index.js","webpack:///./node_modules/@sanity/block-content-to-hyperscript/node_modules/@sanity/image-url/lib/builder.js","webpack:///./node_modules/@sanity/block-content-to-hyperscript/node_modules/@sanity/image-url/lib/urlForImage.js","webpack:///./node_modules/@sanity/block-content-to-hyperscript/node_modules/@sanity/image-url/lib/parseSource.js","webpack:///./node_modules/@sanity/block-content-to-hyperscript/node_modules/@sanity/image-url/lib/parseAssetId.js","webpack:///./node_modules/@sanity/block-content-to-hyperscript/lib/blocksToNodes.js","webpack:///./node_modules/@sanity/block-content-to-hyperscript/lib/buildMarksTree.js","webpack:///./node_modules/@sanity/block-content-to-hyperscript/lib/nestLists.js","webpack:///./node_modules/@sanity/block-content-to-hyperscript/lib/generateKeys.js","webpack:///./node_modules/@sanity/block-content-to-react/lib/targets/dom.js"],"names":["module","exports","__webpack_require__","React","PropTypes","internals","_require","serializers","serializeSpan","renderProps","getImageUrl","blocksToNodes","mergeSerializers","renderNode","createElement","SanityBlockContent","props","customSerializers","defaultSerializers","blockProps","Object","assign","blocks","propTypes","className","string","renderContainerOnSingleChild","bool","projectId","dataset","imageOptions","object","shape","types","marks","list","func","listItem","block","span","oneOfType","arrayOf","_type","isRequired","defaultProps","defineProperty","value","pkgName","getGatsbyImageProps_1","getFluidGatsbyImage","getFixedGatsbyImage","__rest","this","s","e","t","p","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","parseUrl","ImageFormat","DEFAULT_FIXED_WIDTH","DEFAULT_FLUID_MAX_WIDTH","idPattern","sizeMultipliersFixed","sizeMultipliersFluid","getBasicImageProps","node","loc","obj","ref","img","id","asset","_ref","_id","test","assetId","dimensions","extension","split","width","height","map","num","parseInt","aspectRatio","metadata","url","stub","buildImageUrl","convertToFormat","toFormat","parsed","pathname","replace","isConvertedToTarget","query","fm","isOriginal","_a","params","set","toString","newQuery","isWebP","isConverted","includes","image","args","lqip","desiredAspectRatio","forceConvert","srcSets","scale","Math","round","filter","currentWidth","reduce","acc","resolution","currentHeight","imgUrl","webpUrl","baseUrl","webp","push","base","outputHeight","base64","src","srcWebp","srcSet","join","srcSetWebp","maxWidth","maxHeight","sizes","concat","baseSrc","global","required","qs","protocolre","slashes","rules","address","NaN","undefined","ignore","hash","lolcation","key","location","window","self","finaldestination","type","protocol","Url","unescape","href","extractProtocol","match","exec","toLowerCase","rest","parser","relative","extracted","parse","instruction","index","instructions","slice","charAt","path","last","unshift","up","splice","resolve","port","host","hostname","username","password","auth","origin","part","fn","pop","char","ins","stringify","result","undef","has","decode","input","decodeURIComponent","prefix","pairs","isNaN","encodeURIComponent","generateHelpUrl","urlBuilder","objectAssign","enc","materializeError","options","Error","keys","getQueryString","_typeof","Symbol","iterator","constructor","userSerializers","getSerializers","_blocksToNodes","h","serializerOpts","serializeOptions","useDashedStyles","RawMarkSerializer","tag","children","style","isInline","strong","bind","em","code","underline","text-decoration","textDecoration","strike-through","link","mark","blockType","serializer","_props$node","markType","console","warn","markFallback","hardBreak","container","text","empty","child","serializeNode","serializedNode","_key","slug","default","clientConfig","ImageUrlBuilder","apiHost","_urlForImage","__esModule","_defineProperty","enumerable","configurable","writable","_defineProperties","target","descriptor","validFits","validCrops","parent","instance","Constructor","TypeError","_classCallCheck","arguments","source","ownKeys","sym","getOwnPropertyDescriptor","forEach","_objectSpread","protoProps","staticProps","withOptions","_dataset","_projectId","_bg","bg","_width","_height","x","y","focalPoint","_maxWidth","_minWidth","minWidth","_maxHeight","_minHeight","minHeight","_blur","blur","_sharpen","sharpen","left","top","rect","_format","format","_invert","invert","_orientation","orientation","_quality","quality","download","flipHorizontal","flipVertical","ignoreImageParams","fit","crop","spec","_parseSource","_parseAssetId","right","bottom","hotSpotVerticalRadius","hotspot","hotSpotHorizontalRadius","hotSpotCenterX","hotSpotCenterY","_top","hotspotXCenter","_left","max","floor","cdnUrl","filename","isEffectiveCrop","SPEC_NAME_TO_URL_NAME_MAPPINGS","mapping","arr","_mapping","Array","isArray","_arrayWithHoles","_arr","_n","_d","_e","_s","_i","next","done","err","_iterableToArrayLimit","_nonIterableRest","specName","param","specToImageUrl","get","_interopRequireDefault","urlToId","parts","applyDefaults","_slicedToArray","_ref$split2","dimensionString","example","_dimensionString$spli2","imgWidthStr","imgHeightStr","isFinite","buildMarksTree","nestLists","generateKeys","optionProps","isDefined","val","defaults","isListItem","properties","rawBlocks","keyedBlocks","listNestMode","opts","siblings","level","serializeListItem","findListItemIndex","isSpan","serializeBlock","Boolean","nodes","containerProps","defaultMarks","sortMarksByOccurences","spans","markOccurences","occurences","siblingIndex","sibling","sortByOccurence","markA","markB","aOccurences","bOccurences","aDefaultPos","bDefaultPos","sort","markDefs","sortedMarks","rootNode","nodeStack","marksNeeded","pos","markKey","currentNode","findLastParentNode","find","def","lines","line","isListBlock","blockMatchesList","listFromBlock","lastChild","findListMatching","matching","filterOnType","mode","tree","currentList","newList","lastListItem","newLastChild","_match","checksum","str","strlen","charCodeAt","item","JSON","_getSerializers","nestMarks"],"mappings":"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","file":"4-87d780b22b4bbe95d2e4.js","sourcesContent":["module.exports = require('./lib')\n","'use strict';\n\nvar React = require('react');\nvar PropTypes = require('prop-types');\nvar internals = require('@sanity/block-content-to-hyperscript/internals');\n\nvar _require = require('./targets/dom'),\n    serializers = _require.serializers,\n    serializeSpan = _require.serializeSpan,\n    renderProps = _require.renderProps;\n\nvar getImageUrl = internals.getImageUrl,\n    blocksToNodes = internals.blocksToNodes,\n    mergeSerializers = internals.mergeSerializers;\n\nvar renderNode = React.createElement;\n\nvar SanityBlockContent = function SanityBlockContent(props) {\n  var customSerializers = mergeSerializers(SanityBlockContent.defaultSerializers, props.serializers);\n\n  var blockProps = Object.assign({}, renderProps, props, {\n    serializers: customSerializers,\n    blocks: props.blocks || []\n  });\n\n  return blocksToNodes(renderNode, blockProps, serializers, serializeSpan);\n};\n\n// Expose default serializers to the user\nSanityBlockContent.defaultSerializers = serializers;\n\n// Expose logic for building image URLs from an image reference/node\nSanityBlockContent.getImageUrl = getImageUrl;\n\nSanityBlockContent.propTypes = {\n  className: PropTypes.string,\n  renderContainerOnSingleChild: PropTypes.bool,\n\n  // When rendering images, we need project id and dataset, unless images are materialized\n  projectId: PropTypes.string,\n  dataset: PropTypes.string,\n  imageOptions: PropTypes.object,\n\n  serializers: PropTypes.shape({\n    // Common overrides\n    types: PropTypes.object,\n    marks: PropTypes.object,\n\n    // Less common overrides\n    list: PropTypes.func,\n    listItem: PropTypes.func,\n\n    // Low-level serializers\n    block: PropTypes.func,\n    span: PropTypes.func\n  }),\n\n  blocks: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.shape({\n    _type: PropTypes.string.isRequired\n  })), PropTypes.shape({\n    _type: PropTypes.string.isRequired\n  })]).isRequired\n};\n\nSanityBlockContent.defaultProps = {\n  renderContainerOnSingleChild: false,\n  serializers: {},\n  imageOptions: {}\n};\n\nmodule.exports = SanityBlockContent;\n//# sourceMappingURL=BlockContent.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.pkgName = 'gatsby-source-sanity';\nvar getGatsbyImageProps_1 = require(\"./images/getGatsbyImageProps\");\nexports.getFluidGatsbyImage = getGatsbyImageProps_1.getFluidGatsbyImage;\nexports.getFixedGatsbyImage = getGatsbyImageProps_1.getFixedGatsbyImage;\n//# sourceMappingURL=index.js.map","\"use strict\";\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\n            t[p[i]] = s[p[i]];\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst parseUrl = require(\"url-parse\");\nexports.DEFAULT_FIXED_WIDTH = 400;\nexports.DEFAULT_FLUID_MAX_WIDTH = 800;\nvar ImageFormat;\n(function (ImageFormat) {\n    ImageFormat[\"NO_CHANGE\"] = \"\";\n    ImageFormat[\"WEBP\"] = \"webp\";\n    ImageFormat[\"JPG\"] = \"jpg\";\n    ImageFormat[\"PNG\"] = \"png\";\n})(ImageFormat || (ImageFormat = {}));\nconst idPattern = /^image-[A-Za-z0-9]+-\\d+x\\d+-[a-z]+$/;\nconst sizeMultipliersFixed = [1, 1.5, 2, 3];\nconst sizeMultipliersFluid = [0.25, 0.5, 1, 1.5, 2, 3];\nfunction buildImageUrl(loc, stub) {\n    const { projectId, dataset } = loc;\n    const { assetId, extension, metadata } = stub;\n    const { width, height } = metadata.dimensions;\n    const base = 'https://cdn.sanity.io/images';\n    return `${base}/${projectId}/${dataset}/${assetId}-${width}x${height}.${extension}`;\n}\nfunction getBasicImageProps(node, loc) {\n    if (!node) {\n        return false;\n    }\n    const obj = node;\n    const ref = node;\n    const img = node;\n    let id = '';\n    if (typeof node === 'string') {\n        id = node;\n    }\n    else if (obj.asset) {\n        id = obj.asset._ref || obj.asset._id;\n    }\n    else {\n        id = ref._ref || img._id;\n    }\n    const hasId = !id || idPattern.test(id);\n    if (!hasId) {\n        return false;\n    }\n    const [, assetId, dimensions, extension] = id.split('-');\n    const [width, height] = dimensions.split('x').map(num => parseInt(num, 10));\n    const aspectRatio = width / height;\n    const metadata = img.metadata || { dimensions: { width, height, aspectRatio } };\n    const url = img.url || buildImageUrl(loc, { url: '', assetId, extension, metadata });\n    return {\n        url,\n        assetId,\n        extension,\n        metadata,\n    };\n}\nfunction convertToFormat(url, toFormat) {\n    const parsed = parseUrl(url, true);\n    const filename = parsed.pathname.replace(/.*\\//, '');\n    const extension = filename.replace(/.*\\./, '');\n    const isConvertedToTarget = parsed.query.fm === toFormat;\n    const isOriginal = extension === toFormat;\n    // If the original matches the target format, remove any explicit conversions\n    if (isConvertedToTarget && isOriginal) {\n        const _a = parsed.query, { fm } = _a, params = __rest(_a, [\"fm\"]);\n        parsed.set('query', params);\n        return parsed.toString();\n    }\n    if (isConvertedToTarget || isOriginal) {\n        return url;\n    }\n    const newQuery = Object.assign({}, parsed.query, { fm: toFormat });\n    parsed.set('query', newQuery);\n    return parsed.toString();\n}\nfunction isWebP(url) {\n    const isConverted = url.includes('fm=webp');\n    const isOriginal = /[a-f0-9]+-\\d+x\\d+\\.webp/.test(url);\n    return isConverted || isOriginal;\n}\nfunction getFixedGatsbyImage(image, args, loc) {\n    const props = getBasicImageProps(image, loc);\n    if (!props) {\n        return null;\n    }\n    const width = args.width || exports.DEFAULT_FIXED_WIDTH;\n    const height = args.height;\n    const { url, metadata, extension } = props;\n    const { dimensions, lqip } = metadata;\n    let desiredAspectRatio = dimensions.aspectRatio;\n    // If we're cropping, calculate the specified aspect ratio\n    if (args.height) {\n        desiredAspectRatio = width / args.height;\n    }\n    let forceConvert = null;\n    if (args.toFormat) {\n        forceConvert = args.toFormat;\n    }\n    else if (isWebP(props.url)) {\n        forceConvert = 'jpg';\n    }\n    const widths = sizeMultipliersFixed.map(scale => Math.round(width * scale));\n    const initial = { webp: [], base: [] };\n    const srcSets = widths\n        .filter(currentWidth => currentWidth < dimensions.width)\n        .reduce((acc, currentWidth, i) => {\n        const resolution = `${sizeMultipliersFixed[i]}x`;\n        const currentHeight = Math.round(currentWidth / desiredAspectRatio);\n        const imgUrl = `${url}?w=${currentWidth}&h=${currentHeight}&fit=crop`;\n        const webpUrl = convertToFormat(imgUrl, 'webp');\n        const baseUrl = convertToFormat(imgUrl, forceConvert || props.extension);\n        acc.webp.push(`${webpUrl} ${resolution}`);\n        acc.base.push(`${baseUrl} ${resolution}`);\n        return acc;\n    }, initial);\n    const outputHeight = Math.round(height ? height : width / desiredAspectRatio);\n    const imgUrl = `${url}?w=${width}&h=${outputHeight}&fit=crop`;\n    return {\n        base64: lqip || null,\n        aspectRatio: desiredAspectRatio,\n        width: Math.round(width),\n        height: outputHeight,\n        src: convertToFormat(imgUrl, forceConvert || extension),\n        srcWebp: convertToFormat(imgUrl, 'webp'),\n        srcSet: srcSets.base.join(',\\n') || null,\n        srcSetWebp: srcSets.webp.join(',\\n') || null,\n    };\n}\nexports.getFixedGatsbyImage = getFixedGatsbyImage;\nfunction getFluidGatsbyImage(image, args, loc) {\n    const props = getBasicImageProps(image, loc);\n    if (!props) {\n        return null;\n    }\n    const { url, metadata, extension } = props;\n    const { dimensions, lqip } = metadata;\n    const maxWidth = args.maxWidth || exports.DEFAULT_FLUID_MAX_WIDTH;\n    let desiredAspectRatio = dimensions.aspectRatio;\n    // If we're cropping, calculate the specified aspect ratio\n    if (args.maxHeight) {\n        desiredAspectRatio = maxWidth / args.maxHeight;\n    }\n    const maxHeight = args.maxHeight || Math.round(maxWidth / dimensions.aspectRatio);\n    let forceConvert = null;\n    if (args.toFormat) {\n        forceConvert = args.toFormat;\n    }\n    else if (isWebP(props.url)) {\n        forceConvert = 'jpg';\n    }\n    const sizes = args.sizes || `(max-width: ${maxWidth}px) 100vw, ${maxWidth}px`;\n    const widths = sizeMultipliersFluid\n        .map(scale => Math.round(maxWidth * scale))\n        .filter(width => width < dimensions.width)\n        .concat(dimensions.width);\n    const initial = { webp: [], base: [] };\n    const srcSets = widths\n        .filter(currentWidth => currentWidth < dimensions.width)\n        .reduce((acc, currentWidth) => {\n        const currentHeight = Math.round(currentWidth / desiredAspectRatio);\n        const imgUrl = `${url}?w=${currentWidth}&h=${currentHeight}&fit=crop`;\n        const webpUrl = convertToFormat(imgUrl, 'webp');\n        const baseUrl = convertToFormat(imgUrl, forceConvert || props.extension);\n        acc.webp.push(`${webpUrl} ${currentWidth}w`);\n        acc.base.push(`${baseUrl} ${currentWidth}w`);\n        return acc;\n    }, initial);\n    const baseSrc = `${url}?w=${maxWidth}&h=${maxHeight}&fit=crop`;\n    const src = convertToFormat(baseSrc, forceConvert || extension);\n    const srcWebp = convertToFormat(baseSrc, 'webp');\n    return {\n        base64: lqip || null,\n        aspectRatio: desiredAspectRatio,\n        src,\n        srcWebp,\n        srcSet: srcSets.base.join(',\\n') || null,\n        srcSetWebp: srcSets.webp.join(',\\n') || null,\n        sizes,\n    };\n}\nexports.getFluidGatsbyImage = getFluidGatsbyImage;\n//# sourceMappingURL=getGatsbyImageProps.js.map","'use strict';\n\nvar required = require('requires-port')\n  , qs = require('querystringify')\n  , protocolre = /^([a-z][a-z0-9.+-]*:)?(\\/\\/)?([\\S\\s]*)/i\n  , slashes = /^[A-Za-z][A-Za-z0-9+-.]*:\\/\\//;\n\n/**\n * These are the parse rules for the URL parser, it informs the parser\n * about:\n *\n * 0. The char it Needs to parse, if it's a string it should be done using\n *    indexOf, RegExp using exec and NaN means set as current value.\n * 1. The property we should set when parsing this value.\n * 2. Indication if it's backwards or forward parsing, when set as number it's\n *    the value of extra chars that should be split off.\n * 3. Inherit from location if non existing in the parser.\n * 4. `toLowerCase` the resulting value.\n */\nvar rules = [\n  ['#', 'hash'],                        // Extract from the back.\n  ['?', 'query'],                       // Extract from the back.\n  function sanitize(address) {          // Sanitize what is left of the address\n    return address.replace('\\\\', '/');\n  },\n  ['/', 'pathname'],                    // Extract from the back.\n  ['@', 'auth', 1],                     // Extract from the front.\n  [NaN, 'host', undefined, 1, 1],       // Set left over value.\n  [/:(\\d+)$/, 'port', undefined, 1],    // RegExp the back.\n  [NaN, 'hostname', undefined, 1, 1]    // Set left over.\n];\n\n/**\n * These properties should not be copied or inherited from. This is only needed\n * for all non blob URL's as a blob URL does not include a hash, only the\n * origin.\n *\n * @type {Object}\n * @private\n */\nvar ignore = { hash: 1, query: 1 };\n\n/**\n * The location object differs when your code is loaded through a normal page,\n * Worker or through a worker using a blob. And with the blobble begins the\n * trouble as the location object will contain the URL of the blob, not the\n * location of the page where our code is loaded in. The actual origin is\n * encoded in the `pathname` so we can thankfully generate a good \"default\"\n * location from it so we can generate proper relative URL's again.\n *\n * @param {Object|String} loc Optional default location object.\n * @returns {Object} lolcation object.\n * @public\n */\nfunction lolcation(loc) {\n  var globalVar;\n\n  if (typeof window !== 'undefined') globalVar = window;\n  else if (typeof global !== 'undefined') globalVar = global;\n  else if (typeof self !== 'undefined') globalVar = self;\n  else globalVar = {};\n\n  var location = globalVar.location || {};\n  loc = loc || location;\n\n  var finaldestination = {}\n    , type = typeof loc\n    , key;\n\n  if ('blob:' === loc.protocol) {\n    finaldestination = new Url(unescape(loc.pathname), {});\n  } else if ('string' === type) {\n    finaldestination = new Url(loc, {});\n    for (key in ignore) delete finaldestination[key];\n  } else if ('object' === type) {\n    for (key in loc) {\n      if (key in ignore) continue;\n      finaldestination[key] = loc[key];\n    }\n\n    if (finaldestination.slashes === undefined) {\n      finaldestination.slashes = slashes.test(loc.href);\n    }\n  }\n\n  return finaldestination;\n}\n\n/**\n * @typedef ProtocolExtract\n * @type Object\n * @property {String} protocol Protocol matched in the URL, in lowercase.\n * @property {Boolean} slashes `true` if protocol is followed by \"//\", else `false`.\n * @property {String} rest Rest of the URL that is not part of the protocol.\n */\n\n/**\n * Extract protocol information from a URL with/without double slash (\"//\").\n *\n * @param {String} address URL we want to extract from.\n * @return {ProtocolExtract} Extracted information.\n * @private\n */\nfunction extractProtocol(address) {\n  var match = protocolre.exec(address);\n\n  return {\n    protocol: match[1] ? match[1].toLowerCase() : '',\n    slashes: !!match[2],\n    rest: match[3]\n  };\n}\n\n/**\n * Resolve a relative URL pathname against a base URL pathname.\n *\n * @param {String} relative Pathname of the relative URL.\n * @param {String} base Pathname of the base URL.\n * @return {String} Resolved pathname.\n * @private\n */\nfunction resolve(relative, base) {\n  var path = (base || '/').split('/').slice(0, -1).concat(relative.split('/'))\n    , i = path.length\n    , last = path[i - 1]\n    , unshift = false\n    , up = 0;\n\n  while (i--) {\n    if (path[i] === '.') {\n      path.splice(i, 1);\n    } else if (path[i] === '..') {\n      path.splice(i, 1);\n      up++;\n    } else if (up) {\n      if (i === 0) unshift = true;\n      path.splice(i, 1);\n      up--;\n    }\n  }\n\n  if (unshift) path.unshift('');\n  if (last === '.' || last === '..') path.push('');\n\n  return path.join('/');\n}\n\n/**\n * The actual URL instance. Instead of returning an object we've opted-in to\n * create an actual constructor as it's much more memory efficient and\n * faster and it pleases my OCD.\n *\n * It is worth noting that we should not use `URL` as class name to prevent\n * clashes with the global URL instance that got introduced in browsers.\n *\n * @constructor\n * @param {String} address URL we want to parse.\n * @param {Object|String} [location] Location defaults for relative paths.\n * @param {Boolean|Function} [parser] Parser for the query string.\n * @private\n */\nfunction Url(address, location, parser) {\n  if (!(this instanceof Url)) {\n    return new Url(address, location, parser);\n  }\n\n  var relative, extracted, parse, instruction, index, key\n    , instructions = rules.slice()\n    , type = typeof location\n    , url = this\n    , i = 0;\n\n  //\n  // The following if statements allows this module two have compatibility with\n  // 2 different API:\n  //\n  // 1. Node.js's `url.parse` api which accepts a URL, boolean as arguments\n  //    where the boolean indicates that the query string should also be parsed.\n  //\n  // 2. The `URL` interface of the browser which accepts a URL, object as\n  //    arguments. The supplied object will be used as default values / fall-back\n  //    for relative paths.\n  //\n  if ('object' !== type && 'string' !== type) {\n    parser = location;\n    location = null;\n  }\n\n  if (parser && 'function' !== typeof parser) parser = qs.parse;\n\n  location = lolcation(location);\n\n  //\n  // Extract protocol information before running the instructions.\n  //\n  extracted = extractProtocol(address || '');\n  relative = !extracted.protocol && !extracted.slashes;\n  url.slashes = extracted.slashes || relative && location.slashes;\n  url.protocol = extracted.protocol || location.protocol || '';\n  address = extracted.rest;\n\n  //\n  // When the authority component is absent the URL starts with a path\n  // component.\n  //\n  if (!extracted.slashes) instructions[3] = [/(.*)/, 'pathname'];\n\n  for (; i < instructions.length; i++) {\n    instruction = instructions[i];\n\n    if (typeof instruction === 'function') {\n      address = instruction(address);\n      continue;\n    }\n\n    parse = instruction[0];\n    key = instruction[1];\n\n    if (parse !== parse) {\n      url[key] = address;\n    } else if ('string' === typeof parse) {\n      if (~(index = address.indexOf(parse))) {\n        if ('number' === typeof instruction[2]) {\n          url[key] = address.slice(0, index);\n          address = address.slice(index + instruction[2]);\n        } else {\n          url[key] = address.slice(index);\n          address = address.slice(0, index);\n        }\n      }\n    } else if ((index = parse.exec(address))) {\n      url[key] = index[1];\n      address = address.slice(0, index.index);\n    }\n\n    url[key] = url[key] || (\n      relative && instruction[3] ? location[key] || '' : ''\n    );\n\n    //\n    // Hostname, host and protocol should be lowercased so they can be used to\n    // create a proper `origin`.\n    //\n    if (instruction[4]) url[key] = url[key].toLowerCase();\n  }\n\n  //\n  // Also parse the supplied query string in to an object. If we're supplied\n  // with a custom parser as function use that instead of the default build-in\n  // parser.\n  //\n  if (parser) url.query = parser(url.query);\n\n  //\n  // If the URL is relative, resolve the pathname against the base URL.\n  //\n  if (\n      relative\n    && location.slashes\n    && url.pathname.charAt(0) !== '/'\n    && (url.pathname !== '' || location.pathname !== '')\n  ) {\n    url.pathname = resolve(url.pathname, location.pathname);\n  }\n\n  //\n  // We should not add port numbers if they are already the default port number\n  // for a given protocol. As the host also contains the port number we're going\n  // override it with the hostname which contains no port number.\n  //\n  if (!required(url.port, url.protocol)) {\n    url.host = url.hostname;\n    url.port = '';\n  }\n\n  //\n  // Parse down the `auth` for the username and password.\n  //\n  url.username = url.password = '';\n  if (url.auth) {\n    instruction = url.auth.split(':');\n    url.username = instruction[0] || '';\n    url.password = instruction[1] || '';\n  }\n\n  url.origin = url.protocol && url.host && url.protocol !== 'file:'\n    ? url.protocol +'//'+ url.host\n    : 'null';\n\n  //\n  // The href is just the compiled result.\n  //\n  url.href = url.toString();\n}\n\n/**\n * This is convenience method for changing properties in the URL instance to\n * insure that they all propagate correctly.\n *\n * @param {String} part          Property we need to adjust.\n * @param {Mixed} value          The newly assigned value.\n * @param {Boolean|Function} fn  When setting the query, it will be the function\n *                               used to parse the query.\n *                               When setting the protocol, double slash will be\n *                               removed from the final url if it is true.\n * @returns {URL} URL instance for chaining.\n * @public\n */\nfunction set(part, value, fn) {\n  var url = this;\n\n  switch (part) {\n    case 'query':\n      if ('string' === typeof value && value.length) {\n        value = (fn || qs.parse)(value);\n      }\n\n      url[part] = value;\n      break;\n\n    case 'port':\n      url[part] = value;\n\n      if (!required(value, url.protocol)) {\n        url.host = url.hostname;\n        url[part] = '';\n      } else if (value) {\n        url.host = url.hostname +':'+ value;\n      }\n\n      break;\n\n    case 'hostname':\n      url[part] = value;\n\n      if (url.port) value += ':'+ url.port;\n      url.host = value;\n      break;\n\n    case 'host':\n      url[part] = value;\n\n      if (/:\\d+$/.test(value)) {\n        value = value.split(':');\n        url.port = value.pop();\n        url.hostname = value.join(':');\n      } else {\n        url.hostname = value;\n        url.port = '';\n      }\n\n      break;\n\n    case 'protocol':\n      url.protocol = value.toLowerCase();\n      url.slashes = !fn;\n      break;\n\n    case 'pathname':\n    case 'hash':\n      if (value) {\n        var char = part === 'pathname' ? '/' : '#';\n        url[part] = value.charAt(0) !== char ? char + value : value;\n      } else {\n        url[part] = value;\n      }\n      break;\n\n    default:\n      url[part] = value;\n  }\n\n  for (var i = 0; i < rules.length; i++) {\n    var ins = rules[i];\n\n    if (ins[4]) url[ins[1]] = url[ins[1]].toLowerCase();\n  }\n\n  url.origin = url.protocol && url.host && url.protocol !== 'file:'\n    ? url.protocol +'//'+ url.host\n    : 'null';\n\n  url.href = url.toString();\n\n  return url;\n}\n\n/**\n * Transform the properties back in to a valid and full URL string.\n *\n * @param {Function} stringify Optional query stringify function.\n * @returns {String} Compiled version of the URL.\n * @public\n */\nfunction toString(stringify) {\n  if (!stringify || 'function' !== typeof stringify) stringify = qs.stringify;\n\n  var query\n    , url = this\n    , protocol = url.protocol;\n\n  if (protocol && protocol.charAt(protocol.length - 1) !== ':') protocol += ':';\n\n  var result = protocol + (url.slashes ? '//' : '');\n\n  if (url.username) {\n    result += url.username;\n    if (url.password) result += ':'+ url.password;\n    result += '@';\n  }\n\n  result += url.host + url.pathname;\n\n  query = 'object' === typeof url.query ? stringify(url.query) : url.query;\n  if (query) result += '?' !== query.charAt(0) ? '?'+ query : query;\n\n  if (url.hash) result += url.hash;\n\n  return result;\n}\n\nUrl.prototype = { set: set, toString: toString };\n\n//\n// Expose the URL parser and some additional properties that might be useful for\n// others or testing.\n//\nUrl.extractProtocol = extractProtocol;\nUrl.location = lolcation;\nUrl.qs = qs;\n\nmodule.exports = Url;\n","'use strict';\n\n/**\n * Check if we're required to add a port number.\n *\n * @see https://url.spec.whatwg.org/#default-port\n * @param {Number|String} port Port number we need to check\n * @param {String} protocol Protocol we need to check against.\n * @returns {Boolean} Is it a default port for the given protocol\n * @api private\n */\nmodule.exports = function required(port, protocol) {\n  protocol = protocol.split(':')[0];\n  port = +port;\n\n  if (!port) return false;\n\n  switch (protocol) {\n    case 'http':\n    case 'ws':\n    return port !== 80;\n\n    case 'https':\n    case 'wss':\n    return port !== 443;\n\n    case 'ftp':\n    return port !== 21;\n\n    case 'gopher':\n    return port !== 70;\n\n    case 'file':\n    return false;\n  }\n\n  return port !== 0;\n};\n","'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , undef;\n\n/**\n * Decode a URI encoded string.\n *\n * @param {String} input The URI encoded string.\n * @returns {String} The decoded string.\n * @api private\n */\nfunction decode(input) {\n  return decodeURIComponent(input.replace(/\\+/g, ' '));\n}\n\n/**\n * Simple query string parser.\n *\n * @param {String} query The query string that needs to be parsed.\n * @returns {Object}\n * @api public\n */\nfunction querystring(query) {\n  var parser = /([^=?&]+)=?([^&]*)/g\n    , result = {}\n    , part;\n\n  while (part = parser.exec(query)) {\n    var key = decode(part[1])\n      , value = decode(part[2]);\n\n    //\n    // Prevent overriding of existing properties. This ensures that build-in\n    // methods like `toString` or __proto__ are not overriden by malicious\n    // querystrings.\n    //\n    if (key in result) continue;\n    result[key] = value;\n  }\n\n  return result;\n}\n\n/**\n * Transform a query string to an object.\n *\n * @param {Object} obj Object that should be transformed.\n * @param {String} prefix Optional prefix.\n * @returns {String}\n * @api public\n */\nfunction querystringify(obj, prefix) {\n  prefix = prefix || '';\n\n  var pairs = []\n    , value\n    , key;\n\n  //\n  // Optionally prefix with a '?' if needed\n  //\n  if ('string' !== typeof prefix) prefix = '?';\n\n  for (key in obj) {\n    if (has.call(obj, key)) {\n      value = obj[key];\n\n      //\n      // Edge cases where we actually want to encode the value to an empty\n      // string instead of the stringified value.\n      //\n      if (!value && (value === null || value === undef || isNaN(value))) {\n        value = '';\n      }\n\n      pairs.push(encodeURIComponent(key) +'='+ encodeURIComponent(value));\n    }\n  }\n\n  return pairs.length ? prefix + pairs.join('&') : '';\n}\n\n//\n// Expose the module.\n//\nexports.stringify = querystringify;\nexports.parse = querystring;\n","module.exports = require('./lib/internals')\n","'use strict';\n\nvar generateHelpUrl = require('@sanity/generate-help-url');\nvar urlBuilder = require('@sanity/image-url');\nvar objectAssign = require('object-assign');\n\nvar enc = encodeURIComponent;\nvar materializeError = 'You must either:\\n  - Pass `projectId` and `dataset` to the block renderer\\n  - Materialize images to include the `url` field.\\n\\nFor more information, see ' + generateHelpUrl('block-content-image-materializing');\n\nvar getQueryString = function getQueryString(options) {\n  var query = options.imageOptions;\n  var keys = Object.keys(query);\n  if (!keys.length) {\n    return '';\n  }\n\n  var params = keys.map(function (key) {\n    return enc(key) + '=' + enc(query[key]);\n  });\n  return '?' + params.join('&');\n};\n\nvar buildUrl = function buildUrl(props) {\n  var node = props.node,\n      options = props.options;\n  var projectId = options.projectId,\n      dataset = options.dataset;\n\n  var asset = node.asset;\n\n  if (!asset) {\n    throw new Error('Image does not have required `asset` property');\n  }\n\n  if (asset.url) {\n    return asset.url + getQueryString(options);\n  }\n\n  if (!projectId || !dataset) {\n    throw new Error(materializeError);\n  }\n\n  var ref = asset._ref;\n  if (!ref) {\n    throw new Error('Invalid image reference in block, no `_ref` found on `asset`');\n  }\n\n  return urlBuilder(objectAssign({ projectId: projectId, dataset: dataset }, options.imageOptions || {})).image(node).toString();\n};\n\nmodule.exports = buildUrl;\n//# sourceMappingURL=getImageUrl.js.map","'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar objectAssign = require('object-assign');\nvar isDefined = function isDefined(val) {\n  return typeof val !== 'undefined';\n};\n\n// Recursively merge/replace default serializers with user-specified serializers\nmodule.exports = function mergeSerializers(defaultSerializers, userSerializers) {\n  return Object.keys(defaultSerializers).reduce(function (acc, key) {\n    var type = _typeof(defaultSerializers[key]);\n    if (type === 'function') {\n      acc[key] = isDefined(userSerializers[key]) ? userSerializers[key] : defaultSerializers[key];\n    } else if (type === 'object') {\n      acc[key] = objectAssign({}, defaultSerializers[key], userSerializers[key]);\n    } else {\n      acc[key] = typeof userSerializers[key] === 'undefined' ? defaultSerializers[key] : userSerializers[key];\n    }\n    return acc;\n  }, {});\n};\n//# sourceMappingURL=mergeSerializers.js.map","'use strict';\n\nvar getSerializers = require('./serializers');\nvar _blocksToNodes = require('./blocksToNodes');\nvar getImageUrl = require('./getImageUrl');\nvar mergeSerializers = require('./mergeSerializers');\n\nmodule.exports = {\n  blocksToNodes: function blocksToNodes(renderNode, props, defaultSerializers, serializeSpan) {\n    if (defaultSerializers) {\n      return _blocksToNodes(renderNode, props, defaultSerializers, serializeSpan);\n    }\n\n    // Backwards-compatibility\n    var serializers = getSerializers(renderNode);\n    return _blocksToNodes(renderNode, props, serializers.defaultSerializers, serializers.serializeSpan);\n  },\n  getSerializers: getSerializers,\n  getImageUrl: getImageUrl,\n  mergeSerializers: mergeSerializers\n};\n//# sourceMappingURL=internals.js.map","'use strict';\n\nvar objectAssign = require('object-assign');\nvar getImageUrl = require('./getImageUrl');\n\nmodule.exports = function (h, serializerOpts) {\n  var serializeOptions = serializerOpts || { useDashedStyles: false\n\n    // Low-level block serializer\n  };function BlockSerializer(props) {\n    var node = props.node,\n        serializers = props.serializers,\n        options = props.options,\n        isInline = props.isInline,\n        children = props.children;\n\n    var blockType = node._type;\n    var serializer = serializers.types[blockType];\n    if (!serializer) {\n      throw new Error('Unknown block type \"' + blockType + '\", please specify a serializer for it in the `serializers.types` prop');\n    }\n\n    return h(serializer, { node: node, options: options, isInline: isInline }, children);\n  }\n\n  // Low-level span serializer\n  function SpanSerializer(props) {\n    var _props$node = props.node,\n        mark = _props$node.mark,\n        children = _props$node.children;\n\n    var isPlain = typeof mark === 'string';\n    var markType = isPlain ? mark : mark._type;\n    var serializer = props.serializers.marks[markType];\n    if (!serializer) {\n      // @todo Revert back to throwing errors?\n      // eslint-disable-next-line no-console\n      console.warn('Unknown mark type \"' + markType + '\", please specify a serializer for it in the `serializers.marks` prop');\n      return h(props.serializers.markFallback, null, children);\n    }\n\n    return h(serializer, props.node, children);\n  }\n\n  // Low-level list serializer\n  function ListSerializer(props) {\n    var tag = props.type === 'bullet' ? 'ul' : 'ol';\n    return h(tag, null, props.children);\n  }\n\n  // Low-level list item serializer\n  function ListItemSerializer(props) {\n    var children = !props.node.style || props.node.style === 'normal' ? // Don't wrap plain text in paragraphs inside of a list item\n    props.children : // But wrap any other style in whatever the block serializer says to use\n    h(props.serializers.types.block, props, props.children);\n\n    return h('li', null, children);\n  }\n\n  // Renderer of an actual block of type `block`. Confusing, we know.\n  function BlockTypeSerializer(props) {\n    var style = props.node.style || 'normal';\n\n    if (/^h\\d/.test(style)) {\n      return h(style, null, props.children);\n    }\n\n    return style === 'blockquote' ? h('blockquote', null, props.children) : h('p', null, props.children);\n  }\n\n  // Serializers for things that can be directly attributed to a tag without any props\n  // We use partial application to do this, passing the tag name as the first argument\n  function RawMarkSerializer(tag, props) {\n    return h(tag, null, props.children);\n  }\n\n  function UnderlineSerializer(props) {\n    var style = serializeOptions.useDashedStyles ? { 'text-decoration': 'underline' } : { textDecoration: 'underline' };\n\n    return h('span', { style: style }, props.children);\n  }\n\n  function StrikeThroughSerializer(props) {\n    return h('del', null, props.children);\n  }\n\n  function LinkSerializer(props) {\n    return h('a', { href: props.mark.href }, props.children);\n  }\n\n  function ImageSerializer(props) {\n    if (!props.node.asset) {\n      return null;\n    }\n\n    var img = h('img', { src: getImageUrl(props) });\n    return props.isInline ? img : h('figure', null, img);\n  }\n\n  // Serializer that recursively calls itself, producing a hyperscript tree of spans\n  function serializeSpan(span, serializers, index, options) {\n    if (span === '\\n' && serializers.hardBreak) {\n      return h(serializers.hardBreak, { key: 'hb-' + index });\n    }\n\n    if (typeof span === 'string') {\n      return serializers.text ? h(serializers.text, { key: 'text-' + index }, span) : span;\n    }\n\n    var children = void 0;\n    if (span.children) {\n      children = {\n        children: span.children.map(function (child, i) {\n          return options.serializeNode(child, i, span.children, true);\n        })\n      };\n    }\n\n    var serializedNode = objectAssign({}, span, children);\n\n    return h(serializers.span, {\n      key: span._key || 'span-' + index,\n      node: serializedNode,\n      serializers: serializers\n    });\n  }\n\n  var HardBreakSerializer = function HardBreakSerializer() {\n    return h('br');\n  };\n  var defaultMarkSerializers = {\n    strong: RawMarkSerializer.bind(null, 'strong'),\n    em: RawMarkSerializer.bind(null, 'em'),\n    code: RawMarkSerializer.bind(null, 'code'),\n    underline: UnderlineSerializer,\n    'strike-through': StrikeThroughSerializer,\n    link: LinkSerializer\n  };\n\n  var defaultSerializers = {\n    // Common overrides\n    types: {\n      block: BlockTypeSerializer,\n      image: ImageSerializer\n    },\n    marks: defaultMarkSerializers,\n\n    // Less common overrides\n    list: ListSerializer,\n    listItem: ListItemSerializer,\n\n    block: BlockSerializer,\n    span: SpanSerializer,\n    hardBreak: HardBreakSerializer,\n\n    // Container element\n    container: 'div',\n\n    // When we can't resolve the mark properly, use this renderer as the container\n    markFallback: 'span',\n\n    // Allow overriding text renderer, but leave undefined to just use plain strings by default\n    text: undefined,\n\n    // Empty nodes (React uses null, hyperscript with empty strings)\n    empty: ''\n  };\n\n  return {\n    defaultSerializers: defaultSerializers,\n    serializeSpan: serializeSpan\n  };\n};\n//# sourceMappingURL=serializers.js.map","var baseUrl = 'https://docs.sanity.io/help/'\n\nmodule.exports = function generateHelpUrl(slug) {\n  return baseUrl + slug\n}\n","// eslint-disable-next-line import/no-commonjs\nmodule.exports = require('./lib/builder').default\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = urlBuilder;\n\nvar _urlForImage = _interopRequireDefault(require(\"./urlForImage\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar validFits = ['clip', 'crop', 'fill', 'fillmax', 'max', 'scale', 'min'];\nvar validCrops = ['top', 'bottom', 'left', 'right', 'center', 'focalpoint', 'entropy'];\n\nvar ImageUrlBuilder =\n/*#__PURE__*/\nfunction () {\n  function ImageUrlBuilder(parent, options) {\n    _classCallCheck(this, ImageUrlBuilder);\n\n    if (parent) {\n      this.options = _objectSpread({}, parent.options || {}, options || {});\n    } else {\n      this.options = options || {};\n    }\n  }\n\n  _createClass(ImageUrlBuilder, [{\n    key: \"withOptions\",\n    value: function withOptions(options) {\n      return new ImageUrlBuilder(this, options);\n    } // The image to be represented. Accepts a Sanity 'image'-document, 'asset'-document or\n    // _id of asset. To get the benefit of automatic hot-spot/crop integration with the content\n    // studio, the 'image'-document must be provided.\n\n  }, {\n    key: \"image\",\n    value: function image(source) {\n      return this.withOptions({\n        source: source\n      });\n    } // Specify the dataset\n\n  }, {\n    key: \"dataset\",\n    value: function dataset(_dataset) {\n      return this.withOptions({\n        dataset: _dataset\n      });\n    } // Specify the projectId\n\n  }, {\n    key: \"projectId\",\n    value: function projectId(_projectId) {\n      return this.withOptions({\n        projectId: _projectId\n      });\n    } // Specify background color\n\n  }, {\n    key: \"bg\",\n    value: function bg(_bg) {\n      return this.withOptions({\n        bg: _bg\n      });\n    } // Specify the width of the image in pixels\n\n  }, {\n    key: \"width\",\n    value: function width(_width) {\n      return this.withOptions({\n        width: _width\n      });\n    } // Specify the height of the image in pixels\n\n  }, {\n    key: \"height\",\n    value: function height(_height) {\n      return this.withOptions({\n        height: _height\n      });\n    } // Specify focal point in fraction of image dimensions. Each component 0.0-1.0\n\n  }, {\n    key: \"focalPoint\",\n    value: function focalPoint(x, y) {\n      return this.withOptions({\n        focalPoint: {\n          x: x,\n          y: y\n        }\n      });\n    }\n  }, {\n    key: \"maxWidth\",\n    value: function maxWidth(_maxWidth) {\n      return this.withOptions({\n        maxWidth: _maxWidth\n      });\n    }\n  }, {\n    key: \"minWidth\",\n    value: function minWidth(_minWidth) {\n      return this.withOptions({\n        minWidth: _minWidth\n      });\n    }\n  }, {\n    key: \"maxHeight\",\n    value: function maxHeight(_maxHeight) {\n      return this.withOptions({\n        maxHeight: _maxHeight\n      });\n    }\n  }, {\n    key: \"minHeight\",\n    value: function minHeight(_minHeight) {\n      return this.withOptions({\n        minHeight: _minHeight\n      });\n    } // Specify width and height in pixels\n\n  }, {\n    key: \"size\",\n    value: function size(width, height) {\n      return this.withOptions({\n        width: width,\n        height: height\n      });\n    } // Specify blur between 0 and 100\n\n  }, {\n    key: \"blur\",\n    value: function blur(_blur) {\n      return this.withOptions({\n        blur: _blur\n      });\n    }\n  }, {\n    key: \"sharpen\",\n    value: function sharpen(_sharpen) {\n      return this.withOptions({\n        sharpen: _sharpen\n      });\n    } // Specify the desired rectangle of the image\n\n  }, {\n    key: \"rect\",\n    value: function rect(left, top, width, height) {\n      return this.withOptions({\n        rect: {\n          left: left,\n          top: top,\n          width: width,\n          height: height\n        }\n      });\n    } // Specify the image format of the image. 'jpg', 'pjpg', 'png', 'webp'\n\n  }, {\n    key: \"format\",\n    value: function format(_format) {\n      return this.withOptions({\n        format: _format\n      });\n    }\n  }, {\n    key: \"invert\",\n    value: function invert(_invert) {\n      return this.withOptions({\n        invert: _invert\n      });\n    } // Rotation in degrees 0, 90, 180, 270\n\n  }, {\n    key: \"orientation\",\n    value: function orientation(_orientation) {\n      return this.withOptions({\n        orientation: _orientation\n      });\n    } // Compression quality 0-100\n\n  }, {\n    key: \"quality\",\n    value: function quality(_quality) {\n      return this.withOptions({\n        quality: _quality\n      });\n    } // Make it a download link. Parameter is default filename.\n\n  }, {\n    key: \"forceDownload\",\n    value: function forceDownload(download) {\n      return this.withOptions({\n        download: download\n      });\n    } // Flip image horizontally\n\n  }, {\n    key: \"flipHorizontal\",\n    value: function flipHorizontal() {\n      return this.withOptions({\n        flipHorizontal: true\n      });\n    } // Flip image verically\n\n  }, {\n    key: \"flipVertical\",\n    value: function flipVertical() {\n      return this.withOptions({\n        flipVertical: true\n      });\n    } // Ignore crop/hotspot from image record, even when present\n\n  }, {\n    key: \"ignoreImageParams\",\n    value: function ignoreImageParams() {\n      return this.withOptions({\n        ignoreImageParams: true\n      });\n    }\n  }, {\n    key: \"fit\",\n    value: function fit(value) {\n      if (validFits.indexOf(value) === -1) {\n        throw new Error(\"Invalid fit mode \\\"\".concat(value, \"\\\"\"));\n      }\n\n      return this.withOptions({\n        fit: value\n      });\n    }\n  }, {\n    key: \"crop\",\n    value: function crop(value) {\n      if (validCrops.indexOf(value) === -1) {\n        throw new Error(\"Invalid crop mode \\\"\".concat(value, \"\\\"\"));\n      }\n\n      return this.withOptions({\n        crop: value\n      });\n    } // Gets the url based on the submitted parameters\n\n  }, {\n    key: \"url\",\n    value: function url() {\n      return (0, _urlForImage.default)(this.options);\n    } // Synonym for url()\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.url();\n    }\n  }]);\n\n  return ImageUrlBuilder;\n}();\n\nfunction urlBuilder(options) {\n  // Did we get a SanityClient?\n  if (options && _typeof(options.clientConfig) === 'object') {\n    // Inherit config from client\n    return new ImageUrlBuilder(null, {\n      baseUrl: options.clientConfig.apiHost.replace(/^https:\\/\\/api\\./, 'https://cdn.'),\n      projectId: options.clientConfig.projectId,\n      dataset: options.clientConfig.dataset\n    });\n  } // Or just accept the options as given\n\n\n  return new ImageUrlBuilder(null, options);\n}\n//# sourceMappingURL=builder.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = urlForImage;\nObject.defineProperty(exports, \"parseSource\", {\n  enumerable: true,\n  get: function get() {\n    return _parseSource.default;\n  }\n});\n\nvar _parseSource = _interopRequireDefault(require(\"./parseSource\"));\n\nvar _parseAssetId = _interopRequireDefault(require(\"./parseAssetId\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar SPEC_NAME_TO_URL_NAME_MAPPINGS = [['width', 'w'], ['height', 'h'], ['format', 'fm'], ['download', 'dl'], ['blur', 'blur'], ['sharpen', 'sharp'], ['invert', 'invert'], ['orientation', 'or'], ['minHeight', 'min-h'], ['maxHeight', 'max-h'], ['minWidth', 'min-w'], ['maxWidth', 'max-w'], ['quality', 'q'], ['fit', 'fit'], ['crop', 'crop']];\n\nfunction urlForImage(options) {\n  var spec = _objectSpread({}, options || {});\n\n  var source = spec.source;\n  delete spec.source;\n  var image = (0, _parseSource.default)(source);\n\n  if (!image) {\n    return null;\n  }\n\n  var asset = (0, _parseAssetId.default)(image.asset._ref); // Compute crop rect in terms of pixel coordinates in the raw source image\n\n  var crop = {\n    left: Math.round(image.crop.left * asset.width),\n    top: Math.round(image.crop.top * asset.height)\n  };\n  crop.width = Math.round(asset.width - image.crop.right * asset.width - crop.left);\n  crop.height = Math.round(asset.height - image.crop.bottom * asset.height - crop.top); // Compute hot spot rect in terms of pixel coordinates\n\n  var hotSpotVerticalRadius = image.hotspot.height * asset.height / 2;\n  var hotSpotHorizontalRadius = image.hotspot.width * asset.width / 2;\n  var hotSpotCenterX = image.hotspot.x * asset.width;\n  var hotSpotCenterY = image.hotspot.y * asset.height;\n  var hotspot = {\n    left: hotSpotCenterX - hotSpotHorizontalRadius,\n    top: hotSpotCenterY - hotSpotVerticalRadius,\n    right: hotSpotCenterX + hotSpotHorizontalRadius,\n    bottom: hotSpotCenterY + hotSpotHorizontalRadius\n  };\n  spec.asset = asset; // If irrelevant, or if we are requested to: don't perform crop/fit based on\n  // the crop/hotspot.\n\n  if (!(spec.rect || spec.focalPoint || spec.ignoreImageParams || spec.crop)) {\n    spec = _objectSpread({}, spec, fit({\n      crop: crop,\n      hotspot: hotspot\n    }, spec));\n  }\n\n  return specToImageUrl(spec);\n} // eslint-disable-next-line complexity\n\n\nfunction specToImageUrl(spec) {\n  var cdnUrl = spec.baseUrl || 'https://cdn.sanity.io';\n  var filename = \"\".concat(spec.asset.id, \"-\").concat(spec.asset.width, \"x\").concat(spec.asset.height, \".\").concat(spec.asset.format);\n  var baseUrl = \"\".concat(cdnUrl, \"/images/\").concat(spec.projectId, \"/\").concat(spec.dataset, \"/\").concat(filename);\n  var params = [];\n\n  if (spec.rect) {\n    // Only bother url with a crop if it actually crops anything\n    var isEffectiveCrop = spec.rect.left != 0 || spec.rect.top != 0 || spec.rect.height != spec.asset.height || spec.rect.width != spec.asset.width;\n\n    if (isEffectiveCrop) {\n      params.push(\"rect=\".concat(spec.rect.left, \",\").concat(spec.rect.top, \",\").concat(spec.rect.width, \",\").concat(spec.rect.height));\n    }\n  }\n\n  if (spec.bg) {\n    params.push(\"bg=\".concat(spec.bg));\n  }\n\n  if (spec.focalPoint) {\n    params.push(\"fp-x=\".concat(spec.focalPoint.x));\n    params.push(\"fp-x=\".concat(spec.focalPoint.y));\n  }\n\n  if (spec.flipHorizontal || spec.flipVertical) {\n    params.push(\"flip=\".concat(spec.flipHorizontal ? 'h' : '').concat(spec.flipVertical ? 'v' : ''));\n  } // Map from spec name to url param name, and allow using the actual param name as an alternative\n\n\n  SPEC_NAME_TO_URL_NAME_MAPPINGS.forEach(function (mapping) {\n    var _mapping = _slicedToArray(mapping, 2),\n        specName = _mapping[0],\n        param = _mapping[1];\n\n    if (typeof spec[specName] !== 'undefined') {\n      params.push(\"\".concat(param, \"=\").concat(encodeURIComponent(spec[specName])));\n    } else if (typeof spec[param] !== 'undefined') {\n      params.push(\"\".concat(param, \"=\").concat(encodeURIComponent(spec[param])));\n    }\n  });\n\n  if (params.length === 0) {\n    return baseUrl;\n  }\n\n  return \"\".concat(baseUrl, \"?\").concat(params.join('&'));\n}\n\nfunction fit(source, spec) {\n  var result = {\n    width: spec.width,\n    height: spec.height // If we are not constraining the aspect ratio, we'll just use the whole crop\n\n  };\n\n  if (!(spec.width && spec.height)) {\n    result.rect = source.crop;\n    return result;\n  }\n\n  var crop = source.crop;\n  var hotspot = source.hotspot; // If we are here, that means aspect ratio is locked and fitting will be a bit harder\n\n  var desiredAspectRatio = spec.width / spec.height;\n  var cropAspectRatio = crop.width / crop.height;\n\n  if (cropAspectRatio > desiredAspectRatio) {\n    // The crop is wider than the desired aspect ratio. That means we are cutting from the sides\n    var _height = crop.height;\n\n    var _width = _height * desiredAspectRatio;\n\n    var _top = crop.top; // Center output horizontally over hotspot\n\n    var hotspotXCenter = (hotspot.right - hotspot.left) / 2 + hotspot.left;\n\n    var _left = hotspotXCenter - _width / 2; // Keep output within crop\n\n\n    if (_left < crop.left) {\n      _left = crop.left;\n    } else if (_left + _width > crop.left + crop.width) {\n      _left = crop.left + crop.width - _width;\n    }\n\n    result.rect = {\n      left: Math.round(_left),\n      top: Math.round(_top),\n      width: Math.round(_width),\n      height: Math.round(_height)\n    };\n    return result;\n  } // The crop is taller than the desired ratio, we are cutting from top and bottom\n\n\n  var width = crop.width;\n  var height = width / desiredAspectRatio;\n  var left = crop.left; // Center output vertically over hotspot\n\n  var hotspotYCenter = (hotspot.bottom - hotspot.top) / 2 + hotspot.top;\n  var top = hotspotYCenter - height / 2; // Keep output rect within crop\n\n  if (top < crop.top) {\n    top = crop.top;\n  } else if (top + height > crop.top + crop.height) {\n    top = crop.top + crop.height - height;\n  }\n\n  result.rect = {\n    left: Math.max(0, Math.floor(left)),\n    top: Math.max(0, Math.floor(top)),\n    width: Math.round(width),\n    height: Math.round(height)\n  };\n  return result;\n} // For backwards-compatibility\n//# sourceMappingURL=urlForImage.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = parseSource;\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n// Convert an asset-id, asset or image to an image record suitable for processing\n// eslint-disable-next-line complexity\nfunction parseSource(source) {\n  if (!source) {\n    return null;\n  }\n\n  var image;\n\n  if (typeof source === 'string' && isUrl(source)) {\n    // Someone passed an existing image url?\n    image = {\n      asset: {\n        _ref: urlToId(source)\n      }\n    };\n  } else if (typeof source === 'string') {\n    // Just an asset id\n    image = {\n      asset: {\n        _ref: source\n      }\n    };\n  } else if (typeof source._ref === 'string') {\n    // We just got passed an asset directly\n    image = {\n      asset: source\n    };\n  } else if (source._id) {\n    // If we were passed an image asset document\n    image = {\n      asset: {\n        _ref: source._id\n      }\n    };\n  } else if (source.asset && source.asset.url && !source.asset._ref) {\n    image = {\n      asset: {\n        _ref: urlToId(source.asset.url)\n      }\n    };\n  } else if (_typeof(source.asset) === 'object') {\n    image = source;\n  } else {\n    // We got something that does not look like an image, or it is an image\n    // that currently isn't sporting an asset.\n    return null;\n  }\n\n  if (source.crop) {\n    image.crop = source.crop;\n  }\n\n  if (source.hotspot) {\n    image.hotspot = source.hotspot;\n  }\n\n  return applyDefaults(image);\n}\n\nfunction isUrl(url) {\n  return /^https?:\\/\\//.test(\"\".concat(url));\n}\n\nfunction urlToId(url) {\n  var parts = url.split('/').slice(-1);\n  return \"image-\".concat(parts[0]).replace(/\\.([a-z]+)$/, '-$1');\n} // Mock crop and hotspot if image lacks it\n\n\nfunction applyDefaults(image) {\n  if (image.crop && image.hotspot) {\n    return image;\n  }\n\n  return _objectSpread({\n    crop: {\n      left: 0,\n      top: 0,\n      bottom: 0,\n      right: 0\n    },\n    hotspot: {\n      x: 0.5,\n      y: 0.5,\n      height: 1.0,\n      width: 1.0\n    }\n  }, image);\n}\n//# sourceMappingURL=parseSource.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = parseAssetId;\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nvar example = 'image-Tb9Ew8CXIwaY6R1kjMvI0uRR-2000x3000-jpg';\n\nfunction parseAssetId(ref) {\n  var _ref$split = ref.split('-'),\n      _ref$split2 = _slicedToArray(_ref$split, 4),\n      id = _ref$split2[1],\n      dimensionString = _ref$split2[2],\n      format = _ref$split2[3];\n\n  if (!id || !dimensionString || !format) {\n    throw new Error(\"Malformed asset _ref '\".concat(ref, \"'. Expected an id like \\\"\").concat(example, \"\\\".\"));\n  }\n\n  var _dimensionString$spli = dimensionString.split('x'),\n      _dimensionString$spli2 = _slicedToArray(_dimensionString$spli, 2),\n      imgWidthStr = _dimensionString$spli2[0],\n      imgHeightStr = _dimensionString$spli2[1];\n\n  var width = +imgWidthStr;\n  var height = +imgHeightStr;\n  var isValidAssetId = isFinite(width) && isFinite(height);\n\n  if (!isValidAssetId) {\n    throw new Error(\"Malformed asset _ref '\".concat(ref, \"'. Expected an id like \\\"\").concat(example, \"\\\".\"));\n  }\n\n  return {\n    id: id,\n    width: width,\n    height: height,\n    format: format\n  };\n}\n//# sourceMappingURL=parseAssetId.js.map","'use strict';\n\nvar objectAssign = require('object-assign');\nvar buildMarksTree = require('./buildMarksTree');\nvar nestLists = require('./nestLists');\nvar generateKeys = require('./generateKeys');\nvar mergeSerializers = require('./mergeSerializers');\n\n// Properties to extract from props and pass to serializers as options\nvar optionProps = ['projectId', 'dataset', 'imageOptions'];\nvar isDefined = function isDefined(val) {\n  return typeof val !== 'undefined';\n};\nvar defaults = { imageOptions: {} };\n\nfunction blocksToNodes(h, properties, defaultSerializers, serializeSpan) {\n  var props = objectAssign({}, defaults, properties);\n  var rawBlocks = Array.isArray(props.blocks) ? props.blocks : [props.blocks];\n  var keyedBlocks = generateKeys(rawBlocks);\n  var blocks = nestLists(keyedBlocks, props.listNestMode);\n  var serializers = mergeSerializers(defaultSerializers, props.serializers || {});\n\n  var options = optionProps.reduce(function (opts, key) {\n    var value = props[key];\n    if (isDefined(value)) {\n      opts[key] = value;\n    }\n    return opts;\n  }, {});\n\n  function serializeNode(node, index, siblings, isInline) {\n    if (isList(node)) {\n      return serializeList(node);\n    }\n\n    if (isListItem(node)) {\n      return serializeListItem(node, findListItemIndex(node, siblings));\n    }\n\n    if (isSpan(node)) {\n      return serializeSpan(node, serializers, index, { serializeNode: serializeNode });\n    }\n\n    return serializeBlock(node, index, isInline);\n  }\n\n  function findListItemIndex(node, siblings) {\n    var index = 0;\n    for (var i = 0; i < siblings.length; i++) {\n      if (siblings[i] === node) {\n        return index;\n      }\n\n      if (!isListItem(siblings[i])) {\n        continue;\n      }\n\n      index++;\n    }\n\n    return index;\n  }\n\n  function serializeBlock(block, index, isInline) {\n    var tree = buildMarksTree(block);\n    var children = tree.map(function (node, i, siblings) {\n      return serializeNode(node, i, siblings, true);\n    });\n    var blockProps = {\n      key: block._key || 'block-' + index,\n      node: block,\n      isInline: isInline,\n      serializers: serializers,\n      options: options\n    };\n\n    return h(serializers.block, blockProps, children);\n  }\n\n  function serializeListItem(block, index) {\n    var key = block._key;\n    var tree = buildMarksTree(block);\n    var children = tree.map(serializeNode);\n    return h(serializers.listItem, { node: block, serializers: serializers, index: index, key: key, options: options }, children);\n  }\n\n  function serializeList(list) {\n    var type = list.listItem;\n    var level = list.level;\n    var key = list._key;\n    var children = list.children.map(serializeNode);\n    return h(serializers.list, { key: key, level: level, type: type, options: options }, children);\n  }\n\n  // Default to false, so `undefined` will evaluate to the default here\n  var renderContainerOnSingleChild = Boolean(props.renderContainerOnSingleChild);\n\n  var nodes = blocks.map(serializeNode);\n  if (renderContainerOnSingleChild || nodes.length > 1) {\n    var containerProps = props.className ? { className: props.className } : {};\n    return h(serializers.container, containerProps, nodes);\n  }\n\n  if (nodes[0]) {\n    return nodes[0];\n  }\n\n  return typeof serializers.empty === 'function' ? h(serializers.empty) : serializers.empty;\n}\n\nfunction isList(block) {\n  return block._type === 'list' && block.listItem;\n}\n\nfunction isListItem(block) {\n  return block._type === 'block' && block.listItem;\n}\n\nfunction isSpan(block) {\n  return typeof block === 'string' || block.marks || block._type === 'span';\n}\n\nmodule.exports = blocksToNodes;\n//# sourceMappingURL=blocksToNodes.js.map","'use strict';\n\nvar defaultMarks = ['strong', 'em', 'code', 'underline', 'strike-through'];\n\nvar buildMarksTree = function buildMarksTree(block) {\n  var children = block.children,\n      markDefs = block.markDefs;\n\n  if (!children || !children.length) {\n    return [];\n  }\n\n  var sortedMarks = children.map(sortMarksByOccurences);\n  var rootNode = { _type: 'span', children: [] };\n  var nodeStack = [rootNode];\n\n  children.forEach(function (span, i) {\n    var marksNeeded = sortedMarks[i];\n    if (!marksNeeded) {\n      var lastNode = nodeStack[nodeStack.length - 1];\n      lastNode.children.push(span);\n      return;\n    }\n\n    var pos = 1;\n\n    // Start at position one. Root is always plain and should never be removed. (?)\n    if (nodeStack.length > 1) {\n      for (pos; pos < nodeStack.length; pos++) {\n        var mark = nodeStack[pos].markKey;\n        var index = marksNeeded.indexOf(mark);\n        // eslint-disable-next-line max-depth\n        if (index === -1) {\n          break;\n        }\n\n        marksNeeded.splice(index, 1);\n      }\n    }\n\n    // Keep from beginning to first miss\n    nodeStack = nodeStack.slice(0, pos);\n\n    // Add needed nodes\n    var currentNode = findLastParentNode(nodeStack);\n    marksNeeded.forEach(function (mark) {\n      var node = {\n        _type: 'span',\n        _key: span._key,\n        children: [],\n        mark: markDefs.find(function (def) {\n          return def._key === mark;\n        }) || mark,\n        markKey: mark\n      };\n\n      currentNode.children.push(node);\n      nodeStack.push(node);\n      currentNode = node;\n    });\n\n    // Split at newlines to make individual line chunks, but keep newline\n    // characters as individual elements in the array. We use these characters\n    // in the span serializer to trigger hard-break rendering\n    if (isTextSpan(span)) {\n      var lines = span.text.split('\\n');\n      for (var line = lines.length; line-- > 1;) {\n        lines.splice(line, 0, '\\n');\n      }\n\n      currentNode.children = currentNode.children.concat(lines);\n    } else {\n      currentNode.children = currentNode.children.concat(span);\n    }\n  });\n\n  return rootNode.children;\n};\n\n// We want to sort all the marks of all the spans in the following order:\n// 1. Marks that are shared amongst the most adjacent siblings\n// 2. Non-default marks (links, custom metadata)\n// 3. Built-in, plain marks (bold, emphasis, code etc)\nfunction sortMarksByOccurences(span, i, spans) {\n  if (!span.marks || span.marks.length === 0) {\n    return span.marks || [];\n  }\n\n  var markOccurences = span.marks.reduce(function (occurences, mark) {\n    occurences[mark] = occurences[mark] ? occurences[mark] + 1 : 1;\n\n    for (var siblingIndex = i + 1; siblingIndex < spans.length; siblingIndex++) {\n      var sibling = spans[siblingIndex];\n\n      if (sibling.marks && Array.isArray(sibling.marks) && sibling.marks.indexOf(mark) !== -1) {\n        occurences[mark]++;\n      } else {\n        break;\n      }\n    }\n\n    return occurences;\n  }, {});\n\n  var sortByOccurence = sortMarks.bind(null, markOccurences);\n\n  // Slicing because sort() mutates the input\n  return span.marks.slice().sort(sortByOccurence);\n}\n\nfunction sortMarks(occurences, markA, markB) {\n  var aOccurences = occurences[markA] || 0;\n  var bOccurences = occurences[markB] || 0;\n\n  if (aOccurences !== bOccurences) {\n    return bOccurences - aOccurences;\n  }\n\n  var aDefaultPos = defaultMarks.indexOf(markA);\n  var bDefaultPos = defaultMarks.indexOf(markB);\n\n  // Sort default marks last\n  if (aDefaultPos !== bDefaultPos) {\n    return aDefaultPos - bDefaultPos;\n  }\n\n  // Sort other marks simply by key\n  if (markA < markB) {\n    return -1;\n  } else if (markA > markB) {\n    return 1;\n  }\n\n  return 0;\n}\n\nfunction isTextSpan(node) {\n  return node._type === 'span' && typeof node.text === 'string' && (Array.isArray(node.marks) || typeof node.marks === 'undefined');\n}\n\nfunction findLastParentNode(nodes) {\n  for (var i = nodes.length - 1; i >= 0; i--) {\n    var node = nodes[i];\n    if (node._type === 'span' && node.children) {\n      return node;\n    }\n  }\n\n  return undefined;\n}\n\nmodule.exports = buildMarksTree;\n//# sourceMappingURL=buildMarksTree.js.map","'use strict';\n\nvar objectAssign = require('object-assign');\n\n/* eslint-disable max-depth, complexity */\nfunction nestLists(blocks) {\n  var mode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'html';\n\n  var tree = [];\n  var currentList = void 0;\n\n  for (var i = 0; i < blocks.length; i++) {\n    var block = blocks[i];\n    if (!isListBlock(block)) {\n      tree.push(block);\n      currentList = null;\n      continue;\n    }\n\n    // Start of a new list?\n    if (!currentList) {\n      currentList = listFromBlock(block);\n      tree.push(currentList);\n      continue;\n    }\n\n    // New list item within same list?\n    if (blockMatchesList(block, currentList)) {\n      currentList.children.push(block);\n      continue;\n    }\n\n    // Different list props, are we going deeper?\n    if (block.level > currentList.level) {\n      var newList = listFromBlock(block);\n\n      if (mode === 'html') {\n        // Because HTML is kinda weird, nested lists needs to be nested within list items\n        // So while you would think that we could populate the parent list with a new sub-list,\n        // We actually have to target the last list element (child) of the parent.\n        // However, at this point we need to be very careful - simply pushing to the list of children\n        // will mutate the input, and we don't want to blindly clone the entire tree.\n\n        // Clone the last child while adding our new list as the last child of it\n        var lastListItem = lastChild(currentList);\n        var newLastChild = objectAssign({}, lastListItem, {\n          children: lastListItem.children.concat(newList)\n        });\n\n        // Swap the last child\n        currentList.children[currentList.children.length - 1] = newLastChild;\n      } else {\n        currentList.children.push(newList);\n      }\n\n      // Set the newly created, deeper list as the current\n      currentList = newList;\n      continue;\n    }\n\n    // Different list props, are we going back up the tree?\n    if (block.level < currentList.level) {\n      // Current list has ended, and we need to hook up with a parent of the same level and type\n      var match = findListMatching(tree[tree.length - 1], block);\n      if (match) {\n        currentList = match;\n        currentList.children.push(block);\n        continue;\n      }\n\n      // Similar parent can't be found, assume new list\n      currentList = listFromBlock(block);\n      tree.push(currentList);\n      continue;\n    }\n\n    // Different list props, different list style?\n    if (block.listItem !== currentList.listItem) {\n      var _match = findListMatching(tree[tree.length - 1], { level: block.level });\n      if (_match && _match.listItem === block.listItem) {\n        currentList = _match;\n        currentList.children.push(block);\n        continue;\n      } else {\n        currentList = listFromBlock(block);\n        tree.push(currentList);\n        continue;\n      }\n    }\n\n    // eslint-disable-next-line no-console\n    console.warn('Unknown state encountered for block', block);\n    tree.push(block);\n  }\n\n  return tree;\n}\n\nfunction isListBlock(block) {\n  return Boolean(block.listItem);\n}\n\nfunction blockMatchesList(block, list) {\n  return block.level === list.level && block.listItem === list.listItem;\n}\n\nfunction listFromBlock(block) {\n  return {\n    _type: 'list',\n    _key: block._key + '-parent',\n    level: block.level,\n    listItem: block.listItem,\n    children: [block]\n  };\n}\n\nfunction lastChild(block) {\n  return block.children && block.children[block.children.length - 1];\n}\n\nfunction findListMatching(rootNode, matching) {\n  var filterOnType = typeof matching.listItem === 'string';\n  if (rootNode._type === 'list' && rootNode.level === matching.level && filterOnType && rootNode.listItem === matching.listItem) {\n    return rootNode;\n  }\n\n  var node = lastChild(rootNode);\n  if (!node) {\n    return false;\n  }\n\n  return findListMatching(node, matching);\n}\n\nmodule.exports = nestLists;\n//# sourceMappingURL=nestLists.js.map","'use strict';\n\nvar objectAssign = require('object-assign');\n\nmodule.exports = function (blocks) {\n  return blocks.map(function (block) {\n    if (block._key) {\n      return block;\n    }\n\n    return objectAssign({ _key: getStaticKey(block) }, block);\n  });\n};\n\nfunction getStaticKey(item) {\n  return checksum(JSON.stringify(item)).toString(36).replace(/[^A-Za-z0-9]/g, '');\n}\n\n/* eslint-disable no-bitwise */\nfunction checksum(str) {\n  var hash = 0;\n  var strlen = str.length;\n  if (strlen === 0) {\n    return hash;\n  }\n\n  for (var i = 0; i < strlen; i++) {\n    hash = (hash << 5) - hash + str.charCodeAt(i);\n    hash &= hash; // Convert to 32bit integer\n  }\n\n  return hash;\n}\n/* eslint-enable no-bitwise */\n//# sourceMappingURL=generateKeys.js.map","'use strict';\n\nvar React = require('react');\n\nvar _require = require('@sanity/block-content-to-hyperscript/internals'),\n    getSerializers = _require.getSerializers;\n\nvar renderNode = React.createElement;\n\nvar _getSerializers = getSerializers(renderNode),\n    defaultSerializers = _getSerializers.defaultSerializers,\n    serializeSpan = _getSerializers.serializeSpan;\n\nmodule.exports = {\n  serializeSpan: serializeSpan,\n  serializers: defaultSerializers,\n  renderProps: { nestMarks: true }\n};\n//# sourceMappingURL=dom.js.map"],"sourceRoot":""}